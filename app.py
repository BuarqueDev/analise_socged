import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import xlsxwriter
import io

# Configura√ß√µes e constantes
META_DIARIA = 100
CONTATO_EMAIL = "erikbuarque.10@gmail.com"
VERSAO = "1.0.0"

def criar_excel_dashboard(df):
    """Cria um dashboard no Excel com as an√°lises principais."""
    output = io.BytesIO()
    
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        # Aba de dados brutos
        df.to_excel(writer, sheet_name='Dados', index=False)
        
        # Aba de an√°lises
        analises = pd.DataFrame({
            'M√©trica': [
                'Total de Registros',
                'M√©dia Di√°ria',
                'M√©dia Semanal',
                'M√©dia Mensal',
                'Dias Batendo Meta',
                '% Dias Batendo Meta'
            ],
            'Valor': [
                len(df),
                df.groupby(df['Data'].dt.date).size().mean(),
                df.groupby(pd.Grouper(key='Data', freq='W')).size().mean(),
                df.groupby(pd.Grouper(key='Data', freq='M')).size().mean(),
                len(df.groupby(df['Data'].dt.date).size()[df.groupby(df['Data'].dt.date).size() >= META_DIARIA]),
                (len(df.groupby(df['Data'].dt.date).size()[df.groupby(df['Data'].dt.date).size() >= META_DIARIA]) / 
                 len(df.groupby(df['Data'].dt.date).size()) * 100)
            ]
        })
        analises.to_excel(writer, sheet_name='An√°lises', index=False)
        
        # Configura√ß√µes do workbook
        workbook = writer.book
        worksheet = writer.sheets['An√°lises']
        
        # Formato para n√∫meros
        numero_format = workbook.add_format({'num_format': '#,##0.00'})
        worksheet.set_column('B:B', 15, numero_format)
        
        # Criar gr√°ficos
        chart = workbook.add_chart({'type': 'column'})
        chart.add_series({
            'name': 'Registros por Data',
            'categories': '=Dados!$A$2:$A$' + str(len(df) + 1),
            'values': '=Dados!$B$2:$B$' + str(len(df) + 1),
        })
        worksheet.insert_chart('D2', chart)
    
    output.seek(0)
    return output

def calcular_metricas(df, periodo='D'):
    """Calcula m√©tricas b√°sicas para diferentes per√≠odos (D=di√°rio, W=semanal, M=mensal)."""
    return df.groupby(pd.Grouper(key='Data', freq=periodo)).size()

def formatar_data_completa(data_inicio, data_fim):
    """Formata o per√≠odo completo de forma leg√≠vel."""
    return f"{data_inicio.strftime('%d/%m/%Y')} at√© {data_fim.strftime('%d/%m/%Y')}"

def processar_dataframe(df):
    """Processa o DataFrame para an√°lise."""
    df['Data'] = pd.to_datetime(df['Data'], format='%d/%m/%Y')
    return df

def carregar_dataframe(arquivo_carregado):
    """Carrega DataFrame de diferentes formatos."""
    if arquivo_carregado.name.endswith('.xlsx'):
        return pd.read_excel(arquivo_carregado)
    elif arquivo_carregado.name.endswith(('.csv', '.txt')):
        return pd.read_csv(arquivo_carregado, sep='\t', encoding='utf-8')
    else:
        raise ValueError("Formato de arquivo n√£o suportado")

def main():
    st.set_page_config(layout="wide", page_title="An√°lise de Dados")
    st.title('üìä An√°lise Inteligente de Dados')
    
    # Informa√ß√µes sobre o programa
    with st.sidebar.expander("‚ÑπÔ∏è Sobre o Software"):
        st.write("""
        ### Vers√£o
        {}
        
        ### Contato
        - üìß Email: {}
        - üí¨ Feedback: [Link do Forms]
        - üêõ Reportar Bugs: https://github.com/BuarqueDev/
        
        ### Documenta√ß√£o
        [Link para documenta√ß√£o completa]
        """.format(VERSAO, CONTATO_EMAIL))
    
    # Barra lateral de configura√ß√µes
    st.sidebar.header('üõ†Ô∏è Configura√ß√µes')
    
    arquivo_carregado = st.file_uploader('Carregue sua planilha', type=['xlsx', 'csv', 'txt'])
    
    if arquivo_carregado is not None:
        try:
            df = carregar_dataframe(arquivo_carregado)
            df = processar_dataframe(df)
            
            # Filtros de data
            st.sidebar.subheader('üìÖ Filtros de Data')
            filtro_tipo = st.sidebar.selectbox(
                'Tipo de Filtro',
                ['Per√≠odo Completo', 'M√™s Espec√≠fico', 'Intervalo Personalizado']
            )
            
            if filtro_tipo == 'M√™s Espec√≠fico':
                mes_selecionado = st.sidebar.selectbox(
                    'Selecione o M√™s',
                    df['Data'].dt.strftime('%Y-%m').unique()
                )
                df = df[df['Data'].dt.strftime('%Y-%m') == mes_selecionado]
            elif filtro_tipo == 'Intervalo Personalizado':
                data_inicio = st.sidebar.date_input('Data Inicial', df['Data'].min())
                data_fim = st.sidebar.date_input('Data Final', df['Data'].max())
                df = df[(df['Data'].dt.date >= data_inicio) & (df['Data'].dt.date <= data_fim)]
            
            # Abas de an√°lise
            abas = st.tabs([
                'üìà Vis√£o Geral', 
                'üìä An√°lise de Metas',
                'üë• An√°lise por Usu√°rio', 
                'üè¢ An√°lise por Empresa', 
                '‚è∞ An√°lise Temporal',
                'üîç Detalhamento Completo'
            ])
            
            with abas[0]:  # Vis√£o Geral
                col1, col2, col3, col4 = st.columns(4)
                
                # M√©tricas di√°rias, semanais e mensais
                media_diaria = calcular_metricas(df, 'D').mean()
                media_semanal = calcular_metricas(df, 'W').mean()
                media_mensal = calcular_metricas(df, 'M').mean()
                
                col1.metric('üìä M√©dia Di√°ria', f'{media_diaria:.1f}')
                col2.metric('üìà M√©dia Semanal', f'{media_semanal:.1f}')
                col3.metric('üìÖ M√©dia Mensal', f'{media_mensal:.1f}')
                col4.metric('üë• Usu√°rios √önicos', df['Usu√°rio'].nunique())
                
                col4, col5 = st.columns(2)
                with col4:
                    # Distribui√ß√£o de A√ß√µes
                    contagem_acoes = df['A√ß√£o'].value_counts()
                    fig_acoes = px.pie(
                        values=contagem_acoes.values, 
                        names=contagem_acoes.index, 
                        title='Distribui√ß√£o de Tipos de A√ß√£o',
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    fig_acoes.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_acoes, use_container_width=True)
                
                with col5:
                    # Top Usu√°rios por N√∫mero de A√ß√µes
                    top_usuarios = df['Usu√°rio'].value_counts().head(5)
                    fig_usuarios = px.bar(
                        x=top_usuarios.values, 
                        y=top_usuarios.index, 
                        orientation='h',
                        title='Top 5 Usu√°rios por N√∫mero de A√ß√µes',
                        labels={'x': 'N√∫mero de A√ß√µes', 'y': 'Usu√°rio'},
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    st.plotly_chart(fig_usuarios, use_container_width=True)
            
            with abas[1]:  # An√°lise de Metas
                registros_diarios = df.groupby(df['Data'].dt.date).size()
                dias_meta = registros_diarios[registros_diarios >= META_DIARIA]
                
                col1, col2, col3 = st.columns(3)
                col1.metric('üéØ Meta Di√°ria', META_DIARIA)
                col2.metric('üìÖ Dias Batendo Meta', len(dias_meta))
                col3.metric('‚ú® % Sucesso', f'{(len(dias_meta) / len(registros_diarios) * 100):.1f}%')
                
                # Gr√°fico de desempenho vs meta
                fig_meta = go.Figure()
                fig_meta.add_trace(go.Scatter(
                    x=registros_diarios.index,
                    y=registros_diarios.values,
                    name='Registros',
                    line=dict(color='#636EFA')
                ))
                fig_meta.add_trace(go.Scatter(
                    x=registros_diarios.index,
                    y=[META_DIARIA] * len(registros_diarios),
                    name='Meta',
                    line=dict(color='red', dash='dash')
                ))
                fig_meta.update_layout(title='Desempenho Di√°rio vs Meta')
                st.plotly_chart(fig_meta, use_container_width=True)
            
            with abas[2]:  # An√°lise por Usu√°rio
                usuario_selecionado = st.selectbox(
                    'Selecione um Usu√°rio',
                    df['Usu√°rio'].unique()
                )
                
                df_usuario = df[df['Usu√°rio'] == usuario_selecionado]
                
                col6, col7 = st.columns(2)
                with col6:
                    # A√ß√µes do Usu√°rio
                    acoes_usuario = df_usuario['A√ß√£o'].value_counts()
                    fig_acoes_usuario = px.pie(
                        values=acoes_usuario.values,
                        names=acoes_usuario.index,
                        title=f'Distribui√ß√£o de A√ß√µes - {usuario_selecionado}',
                        color_discrete_sequence=px.colors.qualitative.Set3
                    )
                    fig_acoes_usuario.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_acoes_usuario, use_container_width=True)
                
                with col7:
                    # Empresas do Usu√°rio
                    empresas_usuario = df_usuario['Nome Empresa'].value_counts()
                    fig_empresas_usuario = px.bar(
                        x=empresas_usuario.values,
                        y=empresas_usuario.index,
                        orientation='h',
                        title=f'Empresas Trabalhadas - {usuario_selecionado}',
                        labels={'x': 'N√∫mero de A√ß√µes', 'y': 'Empresa'},
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    st.plotly_chart(fig_empresas_usuario, use_container_width=True)
                
                # Detalhes do Usu√°rio
                st.subheader(f'Detalhes de {usuario_selecionado}')
                st.dataframe(df_usuario)
            
            with abas[3]:  # An√°lise por Empresa
                empresa_selecionada = st.selectbox(
                    'Selecione uma Empresa',
                    df['Nome Empresa'].unique()
                )
                
                df_empresa = df[df['Nome Empresa'] == empresa_selecionada]
                
                col8, col9 = st.columns(2)
                with col8:
                    # A√ß√µes da Empresa
                    acoes_empresa = df_empresa['A√ß√£o'].value_counts()
                    fig_acoes_empresa = px.pie(
                        values=acoes_empresa.values,
                        names=acoes_empresa.index,
                        title=f'Distribui√ß√£o de A√ß√µes - {empresa_selecionada}',
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    fig_acoes_empresa.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_acoes_empresa, use_container_width=True)
                
                with col9:
                    # Usu√°rios da Empresa
                    usuarios_empresa = df_empresa['Usu√°rio'].value_counts()
                    fig_usuarios_empresa = px.bar(
                        x=usuarios_empresa.values,
                        y=usuarios_empresa.index,
                        orientation='h',
                        title=f'Usu√°rios Ativos - {empresa_selecionada}',
                        labels={'x': 'N√∫mero de A√ß√µes', 'y': 'Usu√°rio'},
                        color_discrete_sequence=px.colors.qualitative.Set3
                    )
                    st.plotly_chart(fig_usuarios_empresa, use_container_width=True)
                
                # Detalhes da Empresa
                st.subheader(f'Detalhes de {empresa_selecionada}')
                st.dataframe(df_empresa)
            
            with abas[4]:  # An√°lise Temporal
                # Registros por Data
                registros_por_data = df.groupby(df['Data'].dt.date).size()
                fig_registros_data = px.line(
                    x=registros_por_data.index,
                    y=registros_por_data.values,
                    title='Registros por Data',
                    labels={'x': 'Data', 'y': 'N√∫mero de Registros'},
                    color_discrete_sequence=['#636EFA']
                )
                st.plotly_chart(fig_registros_data, use_container_width=True)
            
            with abas[5]:  # Detalhamento Completo
                st.dataframe(df)
                
                # Filtros adicionais
                st.sidebar.subheader('Filtros Avan√ßados')
                filtro_acao = st.sidebar.multiselect(
                    'Filtrar por A√ß√£o',
                    df['A√ß√£o'].unique()
                )
                
                if filtro_acao:
                    df_filtrado = df[df['A√ß√£o'].isin(filtro_acao)]
                    st.dataframe(df_filtrado)

                # Bot√£o para download do dashboard Excel
            excel_data = criar_excel_dashboard(df)
            st.download_button(
                label="üì• Download Dashboard Excel",
                data=excel_data,
                file_name="dashboard_analise.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        except Exception as e:
            st.error(f'Erro ao processar arquivo: {e}')

if __name__ == '__main__':
    main()